<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
						http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">

	<context:component-scan base-package="br.ufg.inf.es.avaliadocente" />

	<!-- Avaliacao Handler: bean responsavel por processar cada avaliação -->
	<bean id="avaliacaoHandler"
		class="br.ufg.inf.es.avaliadocente.core.AvaliacaoHandler"
		scope="prototype"
		destroy-method="destroy" />

	<!-- Asynchronous Avaliacao Handler: bean responsavel por processar uma 
		lista de avaliacoes de forma 'assincrona' -->
	<bean id="asyncAvaliacaoHandler"
		class="br.ufg.inf.es.avaliadocente.core.concurrency.AsynchronousAvaliacaoHandlerImpl"
		scope="prototype" />
	
	<!-- Simple Named Thread Factory -->
	<bean id="simpleNamedThreadFactory"
		class="br.ufg.inf.es.avaliadocente.core.concurrency.SimpleNamedThreadFactory" />
	
	<!-- Factory Bean de ThreadPoolExecutor's 
	-corePoolSize: tamanho do pool
	-maxPoolSizevalue: tamanho máximo do pool
	-keepAliveSeconds: tempo em segundos que uma thread execende ficará em idle no pool até ser destruída -->
	<bean id="threadPoolExecutorFactory"
		class="org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean"
		p:corePoolSize="4" p:maxPoolSize="8" p:keepAliveSeconds="60" />
	
	<!-- ThreadPoolExecutorMonitor: monitora de tempos em tempos o estado de um ThreadPoolExecutor
	-delayMonitoramento: intervalo entre um monitoramento e outro (em segundos). Padrão 10. -->
	<bean id="threadPoolExecutorMonitor"
		class="br.ufg.inf.es.avaliadocente.core.concurrency.ThreadPoolExecutorMonitor"
		scope="prototype" p:delayMonitoramento="10" />
	
	<!-- AvaliacaoListSplitter: garante a divisao (split) de uma lista em sub-listas
	-tamanhoSubListas: quantidade de itens que cada sub-lista conterá. Padrão: 1000 -->
	<bean id="avaliacaoListSplitter"
		class="br.ufg.inf.es.avaliadocente.core.concurrency.AvaliacaoListSplitter">
		<constructor-arg name="tamanhoSubListas" value="1000"/>
	</bean>

</beans>
